---
title: "AA500 Detection Limit"
format: html
editor: visual
---

## Detection Limit Equation

DL = 3.3 \* sigma / m

sigma = std deviation of the residuals

m = slope of calibration curve

residuals = difference in observed results from linear model

## Load Data

```{r}
setwd("/Users/hannahrichardson/Documents/BSU/Research/Data/Raw Data/Nutrient Analyzer")
list.files()

data <- read.csv("nox_silcate_wolv_10_Oct_22.csv")

numchan<- 2
```

## Clean data

```{r}
library(dplyr)
#extract standards and column names
standards <- data[data$ANAL %in% c("Sample ID","100", "50", "25", "10", "5", "2", "blank"),]

#set column names that make sense
names(standards) <- lapply(standards[1, ], as.character)
standards <- standards[-1,] 

#remove NA columns
colSums(is.na(standards) | standards=="")
emptycols<- colSums(is.na(standards) | standards =="")==nrow(standards)
standards<-standards[,!emptycols]

#Extract concentrations and absorbance
chan1.conc<-as.numeric(standards$`Results 1`)
chan1.absorb<-as.numeric(standards$Absorbance)

chan2.conc<-as.numeric(standards$`Results 2`)
chan2.absorb<-as.numeric(standards$Absorbance.1)

chan3.conc<-as.numeric(standards$`Results 3`)
chan3.absorb<-as.numeric(standards$Absorbance.2)

#bind all together in a matrix
conc<-t(rbind(chan1.conc, chan2.conc, chan3.conc))
absorb<- t(rbind(chan1.absorb, chan2.absorb, chan3.absorb))
```

## Fit regression line

This fits a regression line to the calibration data, generating a list for each ion of regression statistics.

```{r}
lm <-list() #allocate list
for (i in 1:numchan){
  lm[[i]] <- lm(absorb[,i] ~ conc[,i])
}
```

## Calculate detection limit

First, Calculate standard deviation of residuals and extract slope.

The residuals are the difference between the observed value of the response (area under the curve) and the area value predicted from the regression line. The standard deviation of the residuals is used to calculate DL.

The slope of the line is also used in the DL equation and is extracted from the regression model here.

This evaluates the equation:

DL = 3.3 \* sigma / m

```{r}
DL<-matrix(nrow=1, ncol=numchan)
for (i in 1:numchan){
  DL[i]=as.numeric(3.3*sd(lm[[i]][["residuals"]])/lm[[i]][["coefficients"]][2])
}

#read the channel from data for proper labelling 
if (numchan == 2) {
  colnames(DL)<-c(data[8,5],data[8,9])
} else {
  colnames(DL)<-c(data[8,5],data[8,9],data[8,13])
}
```

## Error

```{r}
#find duplicates
dupsinit<- data[duplicated(data$ANAL) |duplicated(data$ANAL, fromLast=TRUE),]

#remove non-sample duplicates
dups<-dupsinit[!(dupsinit$ANAL == "Drift" | dupsinit$ANAL == "Low" | dupsinit$ANAL == "Baseline"),]

setrow.names(dups$ANAL)

dupsclean<-dups[c("ANAL","X.2", "X.6")]

test <- ave(dupsclean$X.2, dupsclean$ANAL, FUN=function(x) c(0, diff(x)))

```
